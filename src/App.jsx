import React, { useState } from 'react';
import { Stethoscope, Pill, Home, ClipboardList, Brain, AlertTriangle, Sparkles, Loader } from 'lucide-react';

function App() {
  const [symptoms, setSymptoms] = useState('');
  const [apiKey, setApiKey] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState('');
  const [activeTab, setActiveTab] = useState('');

  // Mock functions - thay b·∫±ng API call th·∫≠t sau
  const handleFunctionCall = async (functionName) => {
    if (!symptoms.trim()) {
      setResult('‚ö†Ô∏è Vui l√≤ng nh·∫≠p tri·ªáu ch·ª©ng tr∆∞·ªõc!');
      return;
    }
    
    if (!apiKey.trim()) {
      setResult('‚ö†Ô∏è Vui l√≤ng nh·∫≠p API Key!');
      return;
    }

    setLoading(true);
    setActiveTab(functionName);
    
    // Gi·∫£ l·∫≠p API call
    setTimeout(() => {
      const responses = {
        'diagnosis': `üîç CH·∫®N ƒêO√ÅN PH√ÇN BI·ªÜT:\n\nD·ª±a tr√™n tri·ªáu ch·ª©ng "${symptoms}", c√≥ th·ªÉ:\n1. Nhi·ªÖm virus ƒë∆∞·ªùng h√¥ h·∫•p\n2. S·ªët xu·∫•t huy·∫øt\n3. COVID-19\n\n‚Üí C·∫ßn ƒëo nhi·ªát ƒë·ªô, x√©t nghi·ªám m√°u.`,
        'medicine': `üíä G·ª¢I √ù THU·ªêC:\n\n- H·∫° s·ªët: Paracetamol 500mg\n- Gi·∫£m ƒëau: Ibuprofen\n- B√π n∆∞·ªõc: Oresol\n\n‚ö†Ô∏è C·∫¢NH B√ÅO: T∆∞ v·∫•n b√°c sƒ© tr∆∞·ªõc khi d√πng!`,
        'home': `üè† H∆Ø·ªöNG D·∫™N T·∫†I NH√Ä:\n\n1. Ngh·ªâ ng∆°i, u·ªëng nhi·ªÅu n∆∞·ªõc\n2. Theo d√µi nhi·ªát ƒë·ªô 4h/l·∫ßn\n3. ƒê·∫øn b·ªánh vi·ªán n·∫øu s·ªët > 39¬∞C`,
        'plan': `üìã K·∫æ HO·∫†CH C·∫§P C·ª®U:\n\n1. ƒê√°nh gi√° ABC (Airway, Breathing, Circulation)\n2. ƒêo d·∫•u hi·ªáu sinh t·ªìn\n3. Ph√¢n lo·∫°i m·ª©c ƒë·ªô ∆∞u ti√™n`
      };
      
      setResult(responses[functionName]);
      setLoading(false);
    }, 1500);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-cyan-100 py-8 px-4">
      <div className="max-w-2xl mx-auto">
        
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-white rounded-full shadow-lg mb-4">
            <Sparkles className="w-8 h-8 text-blue-500" />
          </div>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            C√îNG C·ª§ H·ªñ TR·ª¢ <br /> CH·∫®N ƒêO√ÅN V√Ä C·∫§P C·ª®U
          </h1>
          <p className="text-gray-600 text-lg">
            S·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch, ph√¢n lo·∫°i c·∫•p c·ª©u v√† ch·∫©n ƒëo√°n
          </p>
        </div>

        {/* L√Ω do ƒë·∫øn tr·∫°m */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <label className="block text-xl font-semibold text-gray-800 mb-4 flex items-center">
            <Stethoscope className="w-6 h-6 mr-3 text-blue-500" />
            L√Ω do ƒë·∫øn tr·∫°m (Tri·ªáu ch·ª©ng / Ch·∫•n th∆∞∆°ng)
          </label>
          <textarea
            className="w-full h-32 p-4 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none text-gray-700 placeholder-gray-400"
            placeholder="V√≠ d·ª•: B·ªánh nh√¢n b·ªã s·ªët cao 39.5¬∞C k√®m ƒëau ƒë·∫ßu v√† n√¥n √≥i. Ho·∫∑c: B·ªã t√© xe, ch·∫•n th∆∞∆°ng c·∫≥ng ch√¢n ph·∫£i, ƒëang ch·∫£y m√°u."
            value={symptoms}
            onChange={(e) => setSymptoms(e.target.value)}
          />
        </div>

        {/* API Key */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <label className="block text-xl font-semibold text-gray-800 mb-4 flex items-center">
            <Brain className="w-6 h-6 mr-3 text-orange-500" />
            Gemini API Key (B·∫Øt bu·ªôc khi tri·ªÉn khai ngo√†i)
          </label>
          <input
            type="password"
            className="w-full p-4 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-gray-700 placeholder-gray-400"
            placeholder="Nh·∫≠p API Key c·ªßa b·∫°n t·∫°i ƒë√¢y..."
            value={apiKey}
            onChange={(e) => setApiKey(e.target.value)}
          />
        </div>

        {/* Action Buttons Grid */}
        <div className="grid grid-cols-2 gap-4 mb-8">
          <button 
            onClick={() => handleFunctionCall('home')}
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-600 disabled:bg-blue-300 text-white py-4 px-2 rounded-xl shadow-md transition-all duration-200 flex flex-col items-center justify-center"
          >
            <ClipboardList className="w-8 h-8 mb-2" />
            <span className="font-semibold text-lg">HD T·∫°i nh√†</span>
          </button>
          <button 
            onClick={() => handleFunctionCall('medicine')}
            disabled={loading}
            className="bg-green-500 hover:bg-green-600 disabled:bg-green-300 text-white py-4 px-2 rounded-xl shadow-md transition-all duration-200 flex flex-col items-center justify-center"
          >
            <Pill className="w-8 h-8 mb-2" />
            <span className="font-semibold text-lg">G·ª£i √Ω Thu·ªëc</span>
          </button>
          <button 
            onClick={() => handleFunctionCall('diagnosis')}
            disabled={loading}
            className="bg-purple-500 hover:bg-purple-600 disabled:bg-purple-300 text-white py-4 px-2 rounded-xl shadow-md transition-all duration-200 flex flex-col items-center justify-center"
          >
            <Stethoscope className="w-8 h-8 mb-2" />
            <span className="font-semibold text-lg">Ch·∫©n ƒëo√°n PB</span>
          </button>
          <button 
            onClick={() => handleFunctionCall('plan')}
            disabled={loading}
            className="bg-red-500 hover:bg-red-600 disabled:bg-red-300 text-white py-4 px-2 rounded-xl shadow-md transition-all duration-200 flex flex-col items-center justify-center"
          >
            <Home className="w-8 h-8 mb-2" />
            <span className="font-semibold text-lg">L·∫≠p K·∫æ HO·∫†CH</span>
          </button>
        </div>

        {/* K·∫øt qu·∫£ hi·ªÉn th·ªã */}
        {loading && (
          <div className="bg-white rounded-2xl shadow-lg p-8 mb-6 text-center">
            <Loader className="w-12 h-12 text-blue-500 animate-spin mx-auto mb-4" />
            <p className="text-gray-600 text-lg">ƒêang x·ª≠ l√Ω v·ªõi AI...</p>
          </div>
        )}

        {result && !loading && (
          <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
            <div className="flex items-center mb-4">
              {activeTab === 'diagnosis' && <AlertTriangle className="w-6 h-6 text-purple-500 mr-3" />}
              {activeTab === 'medicine' && <Pill className="w-6 h-6 text-green-500 mr-3" />}
              {activeTab === 'home' && <ClipboardList className="w-6 h-6 text-blue-500 mr-3" />}
              {activeTab === 'plan' && <Home className="w-6 h-6 text-red-500 mr-3" />}
              <h3 className="text-xl font-bold text-gray-800">
                {activeTab === 'diagnosis' && 'CH·∫®N ƒêO√ÅN PH√ÇN BI·ªÜT'}
                {activeTab === 'medicine' && 'G·ª¢I √ù THU·ªêC'}
                {activeTab === 'home' && 'H∆Ø·ªöNG D·∫™N T·∫†I NH√Ä'}
                {activeTab === 'plan' && 'K·∫æ HO·∫†CH C·∫§P C·ª®U'}
              </h3>
            </div>
            <div className="text-gray-700 whitespace-pre-line bg-gray-50 p-4 rounded-lg">
              {result}
            </div>
          </div>
        )}

        {/* Footer */}
        <div className="text-center mt-8 text-gray-500">
          <p>üöë ·ª®ng d·ª•ng h·ªó tr·ª£ y t·∫ø - Phi√™n b·∫£n 1.0</p>
        </div>
      </div>
    </div>
  );
}

export default App;
